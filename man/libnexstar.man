.\" -*- nroff -*-
.TH libnexstar 8 "September 2013" "libnexstar(8)" "libnexstar manual page"
.SH NAME
C API to control NexStar compatible telescopes
.SH SYNOPSIS
.B #include <nexstar.h>

.SH DESCRIPTION
This library implements the serial commands supported by the Celestron
NexStar hand control. This applies to the NexStar GPS, NexStar GPS-SA,
NexStar iSeries, NexStar SE Series, NexStar GT, CPC, SLT, Advanced-VX,
Advanced-GT, and CGE mounts.

Communication to the hand control is 9600 bits/sec, no parity and one
stop bit via the RS-232 port on the base of the hand control.
.SH CALLS

.SS TELESCOPE COMMUNICATION
.TP
.B int open_telescope(char *dev_file);
Opens serial port to communicate with the telescope and confiures it acordingly.
On succes it returns a file descriptor of the device, on error -1 is returned.
.TP
.B int close_telescope(int dev_fd);
This function closes the serial port device. It returns the same values as close() syscall.
.TP
.B int read_telescope(int dev_fd, unsigned char *reply, int len);
Reads
.B len
bytes from
.B dev_fd
and stores them in the memory pointed by
.B *reply.
Make sure memory pointed by
.B *reply
is large enough to acomodate the data.
On success
.B len
is returned. If less then
.B len
bytes are read or on error -1 is returned.
This call is intended for internal library use.
.TP
.B int write_telescope(int dev_fd, char *buf, sizet size);
Writes
.B size
bytes of data pointed by
.B *buf
in
.B dev_fd.
It returns the same values as write() syscall.
This call is intended for internal library use.

.SS TELESCOPE CONTROL
.TP
.B int tc_check_align(int dev);
If the telescope alignment process is complete 1 is returned. If it is not complete 0 is returned.
On error -1 is returned.
.TP
.B int tc_goto_in_progress(int dev);
If the telescope is slewing to an object 1 is returned. If slewing is complete 0 is returned.
On error -1 is returned.
.TP
.B int tc_goto_cancel(int dev);
Cancel telescope slewing. On success 0 is returned, on error -1.
.TP
.B int tc_echo(int dev, char ch);
Send
.B ch
to the telescope and return the echo received by the telescope. On error -1 is returned.
If the sent and the received character are different, this indicates a communication problem. This can be useful to
troubleshoot communication issues.
.TP
.B int tc_get_model(int dev);
Returns the model number of the telescope mount. On error -1 is returned. For the list of available mounts please see the
docuentation provided by Celestron.
.TP
.B int tc_get_version(int dev, char *major, char *minor);
Get the firmware version as major and minor numbers. It should be used in "major.minor" notation.
On success 0 is returned, on error -1.
.TP
.B int tc_get_tracking_mode(int dev);
Get the current tracking mode. Possible values are
.B TC_TRACK_OFF
(tracking is OFF),
.B TC_TRACK_ALT_AZ
(Altazimutal tracking),
.B TC_TRACK_EQ_NORTH
(Equatorial tracking, northern hemisphere) and
.B TC_REACK_EQ_SOUTH
(Equatorial tracking, southern hemisphere). On error -1 is retured.
.TP
.B int tc_set_tracking_mode(int dev, char mode);
Set the tracking mode. See tc_get_tracking_mode() for the list of the available modes. On success 0 is returned, on error -1.
.TP
.B int tc_get_rade(int dev, double *ra, double *de);
.TP
.B int tc_get_rade_p(int dev, double *ra, double *de);
Read right ascension and declination from the telescope mount and store them in
.B *ra
and
.B *de
in decinal degrees. On success 0 is returned, on error -1.
The only difference between tc_get_rade() and tc_get_rade_p() is that tc_get_rade_p() uses the high precission
version of the command.
.TP
.B int tc_get_azalt(int dev, double *az, double *alt);
.TP
.B int tc_get_azalt_p(int dev, double *az, double *alt);
Read azimuth and altitude from the telescope mount and store them in
.B *az
and
.B *alt
in decinal degrees. On success 0 is returned, on error -1.
The only difference between tc_get_azalt() and tc_get_azalt_p() is that tc_get_azalt_p() uses the high precission
version of the command.
.TP
.B int tc_goto_rade(int dev, double ra, double de);
.TP
.B int tc_goto_rade_p(int dev, double ra, double de);
Point the telescope to right ascension
.B ra
and declination
.B de
both in decimal degrees. On success 0 is returned, on error -1. If right ascension or declination is out of range -2 is returned.
This function returns before the GOTO command is complete. To check the completion tc_goto_in_progress() should be used. To cancel
slewing tc_goto_cancel() must be used.
The only difference between tc_goto_rade() and tc_goto_rade_p() is that tc_goto_rade_p() uses the high precission
version of the command.
.TP
.B int tc_goto_azalt(int dev, double az, double alt);
.TP
.B int tc_goto_azalt_p(int dev, double az, double alt);
Point the telescope to azimuth
.B az
and altitude
.B alt
both in decimal degrees. On success 0 is returned, on error -1. If azimuth or altitude is out of range -2 is returned.
This function returns before the GOTO command is complete. To check the completion tc_goto_in_progress() should be used. To cancel
slewing tc_goto_cancel() must be used.
The only difference between tc_goto_azalt() and tc_goto_azalt_p() is that tc_goto_azalt_p() uses the high precission
version of the command.
.TP
.B int tc_sync_rade(int dev, double ra, double de);
.TP
.B int tc_sync_rade_p(int dev, double ra, double de);
.TP
.B int tc_get_location(int dev, double *lon, double *lat);
(TBD)
.TP
.B int tc_set_location(int dev, double lon, double lat);
(TBD)
.TP
.B time_t tc_get_time(int dev, time_t *ttime, int *tz, int *dst);
(TBD)
.TP
.B int tc_set_time(char dev, time_t ttime, int tz, int dst);
(TBD)
.TP
.B int tc_slew_fixed(int dev, char axis, char direction, char rate);
(TBD)
.TP
.B int tc_slew_variable(int dev, char axis, char direction, float rate);
(TBD)

.SS COORDIANTE CONVERSION
.TP
.B int pnex2dd(char *nex, double *d1, double *d2);
.TP
.B int nex2dd(char *nex, double *d1, double *d2);
This call is intended for internal library use. (TBD)
.TP
.B int dd2nex(double d1, double d2, char *nex);
.TP
.B int dd2pnex(double d1, double d2, char *nex);
This call is intended for internal library use. (TBD)

.SH EXAMPLE
.PP
.RS 0
#include <stdio.h>
.RS 0
#include <nexstar.h>
.RS 0

.RS 0
int main(int argc, char *argv[]) {
.RS 0

.RS 0
        int dev = open_telescope("/dev/ttyUSB0");
.RS 0
        if (dev < 0) {
.RS 0
                printf("Can not open device.\\n");
.RS 0
                return 1;
.RS 0
        }
.RS 0

.RS 0
        /* check if the telescope is aligned */
.RS 0
        int aligned = tc_check_align(dev);
.RS 0
        if (aligned < 0) {
.RS 0
                printf("Communication error.\\n");
.RS 0
                close_telescope(dev);
.RS 0
                return 1;
.RS 0
        }
.RS 0
        if (!aligned) {
.RS 0
                printf("Telescope is not aligned. Please align it!\\n");
.RS 0
                close_telescope(dev);
.RS 0
                return 1;
.RS 0
        }
.RS 0
        printf("Telescope is aligned.\\n");
.RS 0

.RS 0
        /* Get the Right Ascension and Declination from the telescope */
.RS 0
        double ra, de;
.RS 0
        if (tc_get_rade_p(dev, &ra, &de)) {
.RS 0
                printf("Communication error.\\n");
.RS 0
                close_telescope(dev);
.RS 0
                return 1;
.RS 0
        }
.RS 0
        printf("Telescope coordinates are:\\n");
.RS 0
        printf("RA = %f, DE = %f\\n", ra, de);
.RS 0

.RS 0
        close_telescope(dev);
.RS 0
}

.SH SEE ALSO
deg2str(8)

For more information about the NexStar commands please refer to the original
protocol specification described here:
http://www.celestron.com/c3/images/files/downloads/1154108406_nexstarcommprot.pdf

.SH AUTHORS
Created by Rumen G.Bogdanovski <rumen@skyarchive.org>
.SH BUGS
If you find any, please send bug reports to rumen@skyarchive.org
